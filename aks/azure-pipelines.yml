# This pipeline is only meant to be executed manually
trigger: none

pool:
  name: Default

variables:
  - group: aks.variables
  - group: azure.variables
  - group: sag.variables
  - group: environment.variables

steps:

- task: DownloadSecureFile@1
  name: TLSPrivateKey
  displayName: 'Download TLS certificate private key'
  inputs:
    secureFile: 'cert.key'

# Not really a secret, managed as a secret for convenience
- task: DownloadSecureFile@1
  name: TLSPublicKey
  displayName: 'Download TLS certificate public key'
  inputs:
    secureFile: 'cert.crt'

- task: DownloadSecureFile@1
  name: MSRLicense
  displayName: 'Download MSR License'
  inputs:
    secureFile: 'msr-license.xml'

- task: DownloadSecureFile@1
  name: UMLicense
  displayName: 'Download MSR License'
  inputs:
    secureFile: 'um-license.xml'

- task: DownloadSecureFile@1
  name: MCGWLicense
  displayName: 'Download Microgateway License'
  inputs:
    secureFile: 'mcgw-license.xml'

- script: |
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
  displayName: 'Install helm'

- script: chmod u+x ./aks/*.sh
  displayName: "Grant shell execution permissions"

- script: |
    ./00-az-login.sh
  displayName: 'Login to Azure with service principal'
  workingDirectory: ./aks
  env:
    AZ_SP_SECRET: $(AZ_SP_SECRET)

- script: |
    ./01-create_rg.sh
  displayName: 'Create resource group for AKS cluster'
  workingDirectory: ./aks

- script: |
    ./02-create_cluster.sh
  displayName: 'Create AKS cluster'
  workingDirectory: ./aks

- script: |
    ./03-create_kubeconfig.sh
  displayName: 'Create kubeconfig for kubectl'
  workingDirectory: ./aks

- script: |
    ./04-create_sagacr_secret.sh
  displayName: 'Create secret to connect to SAG ACR'
  workingDirectory: ./aks
  env:
    SAG_ACR_PASSWORD: $(SAG_ACR_PASSWORD)

- script: |
    export MSR_LICENSE_FILE_PATH=$(MSRLicense.secureFilePath)
    export UM_LICENSE_FILE_PATH=$(UMLicense.secureFilePath)
    export MCGW_LICENSE_FILE_PATH=$(MCGWLicense.secureFilePath)
    ./06-create_product_license_secrets.sh
  displayName: 'Create secrets for the SAG product licenses'
  workingDirectory: ./aks

- script: |
    ./07-create_environment_secret.sh
  displayName: 'Create environment secret'
  workingDirectory: ./aks
  env:
    SAG_MSR_ADMIN_PASSWORD: $(SAG_MSR_ADMIN_PASSWORD)
    RDS_PASSWORD: $(RDS_PASSWORD)
    S3_ACCESS_KEY: $(S3_ACCESS_KEY)
    S3_ACCESS_SECRET: $(S3_ACCESS_SECRET)
    SFTP_PASSWORD: $(SFTP_PASSWORD)
    SMTP_AUTH_PASSWORD: $(SMTP_AUTH_PASSWORD)
    API_GATEWAY_PASSWORD: $(API_GATEWAY_PASSWORD)

- script: |
    ./08-create_environment_configmap.sh
  displayName: 'Create environment config map'
  workingDirectory: ./aks

- script: |
    export TLS_PUBLICKEY_FILE_PATH=$(TLSPublicKey.secureFilePath)
    export TLS_PRIVATEKEY_FILE_PATH=$(TLSPrivateKey.secureFilePath)
    ./09-create_ssl_secret.sh
  displayName: 'Create secret for the TLS certificate'
  workingDirectory: ./aks

- script: |
    ./10-install_ingress.sh
  displayName: 'Installing ingress controller'
  workingDirectory: ./aks
  env:
    GANDI_PAT_TOKEN: $(GANDI_PAT_TOKEN)

- script: |
    export TLS_PUBLICKEY_FILE_PATH=$(TLSPublicKey.secureFilePath)
    export TLS_PRIVATEKEY_FILE_PATH=$(TLSPrivateKey.secureFilePath)
    ./11-install_prometheus-grafana.sh
  displayName: 'Installing Prometheus and Grafana'
  workingDirectory: ./aks

- script: |
    ./13-install_um.sh
  displayName: 'Installing Universal Messaging'
  workingDirectory: ./aks
